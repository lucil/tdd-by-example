<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="586px" preserveAspectRatio="none" style="width:1841px;height:586px;background:#FFFFFF;" version="1.1" viewBox="0 0 1841 586" width="1841px" zoomAndPan="magnify"><defs/><g><rect fill="#ADD8E6" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="131" x="10" y="274.1973"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="20" y="297.7324">Design Patterns</text><rect fill="#D3D3D3" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="95" x="191" y="20"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="201" y="43.5352">Command</text><rect fill="#FFBBCC" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="813" x="336" y="20"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="789" x="346" y="43.5352">What do you do when you need the invocation of a computation to be more complicated than a simple method call?</text><rect fill="#90EE90" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="360" x="1199" y="20"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="336" x="1209" y="43.5352">Make an object for the computation and invoke it</text><path d="M1149,38.2441 L1159,38.2441 C1174,38.2441 1174,38.2441 1189,38.2441 L1199,38.2441 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M286,38.2441 L296,38.2441 C311,38.2441 311,38.2441 326,38.2441 L336,38.2441 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M141,292.4414 L151,292.4414 C166,292.4414 166,38.2441 181,38.2441 L191,38.2441 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#D3D3D3" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="110" x="191" y="76.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="201" y="100.0234">Value Object</text><rect fill="#FFBBCC" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="652" x="351" y="76.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="628" x="361" y="100.0234">How do you design objects that will be widely shared, but for whom identity is unimportant?</text><rect fill="#90EE90" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="776" x="1053" y="76.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="752" x="1063" y="100.0234">Set their state when they are created and never change it. Operations on the object always return a new object</text><path d="M1003,94.7324 L1013,94.7324 C1028,94.7324 1028,94.7324 1043,94.7324 L1053,94.7324 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M301,94.7324 L311,94.7324 C326,94.7324 326,94.7324 341,94.7324 L351,94.7324 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M141,292.4414 L151,292.4414 C166,292.4414 166,94.7324 181,94.7324 L191,94.7324 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#D3D3D3" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="99" x="191" y="132.9766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="201" y="156.5117">Null Object</text><rect fill="#FFBBCC" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="368" x="340" y="132.9766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="344" x="350" y="156.5117">How do you represent special cases using objects?</text><rect fill="#90EE90" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="694" x="758" y="132.9766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="674" x="768" y="156.5117">Create an object representing the special case and give it the same protocol as the regular objects.</text><path d="M708,151.2207 L718,151.2207 C733,151.2207 733,151.2207 748,151.2207 L758,151.2207 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M290,151.2207 L300,151.2207 C315,151.2207 315,151.2207 330,151.2207 L340,151.2207 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M141,292.4414 L151,292.4414 C166,292.4414 166,151.2207 181,151.2207 L191,151.2207 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#D3D3D3" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="144" x="191" y="189.4648"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="201" y="213">Template Method</text><rect fill="#FFBBCC" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="729" x="385" y="189.4648"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="705" x="395" y="213">How do you represent the invariant sequence of a computation while provinding for future refinement?</text><rect fill="#90EE90" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="506" x="1164" y="189.4648"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="482" x="1174" y="213">Write a method that is implemented entirely in terms of other methods</text><path d="M1114,207.709 L1124,207.709 C1139,207.709 1139,207.709 1154,207.709 L1164,207.709 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M335,207.709 L345,207.709 C360,207.709 360,207.709 375,207.709 L385,207.709 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M141,292.4414 L151,292.4414 C166,292.4414 166,207.709 181,207.709 L191,207.709 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#D3D3D3" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="140" x="191" y="245.9531"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="201" y="269.4883">Pluggable Object</text><rect fill="#FFBBCC" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="233" x="381" y="245.9531"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="209" x="391" y="269.4883">How do you express variation?</text><rect fill="#90EE90" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="692" x="664" y="245.9531"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="672" x="674" y="269.4883">When explicit decision making begins to spread, then create on object that contains the condition.</text><path d="M614,264.1973 L624,264.1973 C639,264.1973 639,264.1973 654,264.1973 L664,264.1973 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M331,264.1973 L341,264.1973 C356,264.1973 356,264.1973 371,264.1973 L381,264.1973 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M141,292.4414 L151,292.4414 C166,292.4414 166,264.1973 181,264.1973 L191,264.1973 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#D3D3D3" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="151" x="191" y="302.4414"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="201" y="325.9766">Pluggable Selector</text><rect fill="#FFBBCC" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="451" x="392" y="302.4414"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="427" x="402" y="325.9766">How do you invoke different behaviour for different instances?</text><rect fill="#90EE90" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="461" x="893" y="302.4414"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="437" x="903" y="325.9766">Store the name of a method and dynamically invoke the method</text><path d="M843,320.6855 L853,320.6855 C868,320.6855 868,320.6855 883,320.6855 L893,320.6855 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M342,320.6855 L352,320.6855 C367,320.6855 367,320.6855 382,320.6855 L392,320.6855 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M141,292.4414 L151,292.4414 C166,292.4414 166,320.6855 181,320.6855 L191,320.6855 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#D3D3D3" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="130" x="191" y="358.9297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="106" x="201" y="382.4648">Factory Method</text><rect fill="#FFBBCC" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="560" x="371" y="358.9297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="536" x="381" y="382.4648">How do you create an object when you want flexibility in creating new objects?</text><rect fill="#90EE90" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="427" x="981" y="358.9297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="407" x="991" y="382.4648">Create an object in a method instead of using a constructor</text><path d="M931,377.1738 L941,377.1738 C956,377.1738 956,377.1738 971,377.1738 L981,377.1738 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M321,377.1738 L331,377.1738 C346,377.1738 346,377.1738 361,377.1738 L371,377.1738 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M141,292.4414 L151,292.4414 C166,292.4414 166,377.1738 181,377.1738 L191,377.1738 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#D3D3D3" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="85" x="191" y="415.418"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="61" x="201" y="438.9531">Imposter</text><rect fill="#FFBBCC" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="423" x="326" y="415.418"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="399" x="336" y="438.9531">How do you introduce a new variation into a computation?</text><rect fill="#90EE90" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="700" x="799" y="415.418"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="676" x="809" y="438.9531">Introduce a new object with the same protocol as an existing object but a different implementation</text><path d="M749,433.6621 L759,433.6621 C774,433.6621 774,433.6621 789,433.6621 L799,433.6621 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M276,433.6621 L286,433.6621 C301,433.6621 301,433.6621 316,433.6621 L326,433.6621 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M141,292.4414 L151,292.4414 C166,292.4414 166,433.6621 181,433.6621 L191,433.6621 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#D3D3D3" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="98" x="191" y="471.9063"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="201" y="495.4414">Composite</text><rect fill="#FFBBCC" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="789" x="339" y="471.9063"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="765" x="349" y="495.4414">How do you implement an object whose behaviour is the composition of the behaviour of a list of other objects?</text><rect fill="#90EE90" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="348" x="1178" y="471.9063"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="324" x="1188" y="495.4414">Make it an Imposter for the component objects.</text><path d="M1128,490.1504 L1138,490.1504 C1153,490.1504 1153,490.1504 1168,490.1504 L1178,490.1504 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M289,490.1504 L299,490.1504 C314,490.1504 314,490.1504 329,490.1504 L339,490.1504 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M141,292.4414 L151,292.4414 C166,292.4414 166,490.1504 181,490.1504 L191,490.1504 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#D3D3D3" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="168" x="191" y="528.3945"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="201" y="551.9297">Collecting parameter</text><rect fill="#FFBBCC" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="581" x="409" y="528.3945"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="557" x="419" y="551.9297">How do you collect the results of an operation that is spread over several objects?</text><rect fill="#90EE90" height="36.4883" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="508" x="1040" y="528.3945"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="484" x="1050" y="551.9297">Add a parameter to the operation in which the results will be collected.</text><path d="M990,546.6387 L1000,546.6387 C1015,546.6387 1015,546.6387 1030,546.6387 L1040,546.6387 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M359,546.6387 L369,546.6387 C384,546.6387 384,546.6387 399,546.6387 L409,546.6387 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M141,292.4414 L151,292.4414 C166,292.4414 166,546.6387 181,546.6387 L191,546.6387 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><!--MD5=[ecf1b9983239e59361feab321535e494]
@startmindmap Red Bar Patterns
<style>
mindmapDiagram {
    .green {
        BackgroundColor lightgreen
    }
    .rose {
        BackgroundColor #FFBBCC
    }
    .blue {
        BackgroundColor lightblue
    }
    .grey {
        BackgroundColor lightgrey
    }
}
</style>
*  Design Patterns <<blue>>
** Command <<grey>>
*** What do you do when you need the invocation of a computation to be more complicated than a simple method call? <<rose>>
**** Make an object for the computation and invoke it <<green>>
** Value Object <<grey>>
*** How do you design objects that will be widely shared, but for whom identity is unimportant? <<rose>>
**** Set their state when they are created and never change it. Operations on the object always return a new object <<green>>
** Null Object <<grey>>
*** How do you represent special cases using objects? <<rose>>
****  Create an object representing the special case and give it the same protocol as the regular objects.<<green>>
** Template Method <<grey>>
*** How do you represent the invariant sequence of a computation while provinding for future refinement? <<rose>>
**** Write a method that is implemented entirely in terms of other methods <<green>>
** Pluggable Object <<grey>>
*** How do you express variation? <<rose>>
****  When explicit decision making begins to spread, then create on object that contains the condition.<<green>>
** Pluggable Selector <<grey>>
*** How do you invoke different behaviour for different instances? <<rose>>
**** Store the name of a method and dynamically invoke the method <<green>>
** Factory Method <<grey>>
*** How do you create an object when you want flexibility in creating new objects? <<rose>>
****  Create an object in a method instead of using a constructor<<green>>
** Imposter <<grey>>
*** How do you introduce a new variation into a computation? <<rose>>
**** Introduce a new object with the same protocol as an existing object but a different implementation <<green>>
** Composite <<grey>>
*** How do you implement an object whose behaviour is the composition of the behaviour of a list of other objects? <<rose>>
**** Make it an Imposter for the component objects. <<green>>
** Collecting parameter <<grey>>
*** How do you collect the results of an operation that is spread over several objects? <<rose>>
**** Add a parameter to the operation in which the results will be collected. <<green>>


@endmindmap

PlantUML version 1.2022.7(Mon Aug 22 19:01:30 CEST 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: IT
--></g></svg>